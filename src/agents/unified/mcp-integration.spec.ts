import { Test, TestingModule } from '@nestjs/testing';
import { ConfigService } from '@nestjs/config';
import { MCPClientService } from '../services/mcp-client.service';
import { ComprehensiveAnalystAgent } from './comprehensive-analyst.agent';
import { TradingStrategistAgent } from './trading-strategist.agent';
import { UnifiedOrchestratorService } from './unified-orchestrator.service';
import { LLMService } from '../services/llm.service';
import { AgentType, TradingRecommendation } from '../interfaces/agent.interface';

describe('MCPÈõÜÊàêÊµãËØï', () => {
  let mcpClient: MCPClientService;
  let orchestrator: UnifiedOrchestratorService;

  const mockConfigService = {
    get: jest.fn((key: string, defaultValue?: any) => {
      const config = {
        'DASHSCOPE_API_KEY': 'test-api-key-12345',
        'COMPREHENSIVE_ANALYST_MODEL': 'qwen-plus',
        'COMPREHENSIVE_ANALYST_TEMPERATURE': 0.7,
        'COMPREHENSIVE_ANALYST_MAX_TOKENS': 4000,
        'COMPREHENSIVE_ANALYST_TIMEOUT': 60,
        'COMPREHENSIVE_ANALYST_RETRY_COUNT': 3,
        'TRADING_STRATEGIST_MODEL': 'qwen-plus',
        'TRADING_STRATEGIST_TEMPERATURE': 0.6,
        'TRADING_STRATEGIST_MAX_TOKENS': 3000,
        'TRADING_STRATEGIST_TIMEOUT': 45,
        'TRADING_STRATEGIST_RETRY_COUNT': 3,
        'DASHSCOPE_STANDARD_MODEL': 'qwen-plus',
        'LLM_DEFAULT_TEMPERATURE': 0.7,
        'LLM_DEFAULT_MAX_TOKENS': 4000,
        'LLM_DEFAULT_TIMEOUT': 60,
        'LLM_MAX_RETRIES': 3,
      };
      return config[key] || defaultValue;
    }),
  };

  const mockLLMService = {
    generateWithTools: jest.fn(),
    generate: jest.fn(),
  };

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        MCPClientService,
        ComprehensiveAnalystAgent,
        TradingStrategistAgent,
        UnifiedOrchestratorService,
        {
          provide: ConfigService,
          useValue: mockConfigService,
        },
        {
          provide: LLMService,
          useValue: mockLLMService,
        },
      ],
    }).compile();

    mcpClient = module.get<MCPClientService>(MCPClientService);
    orchestrator = module.get<UnifiedOrchestratorService>(UnifiedOrchestratorService);
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('MCPÂÆ¢Êà∑Á´ØÂü∫Á°ÄÂäüËÉΩ', () => {
    it('Â∫îËØ•Ê≠£Á°ÆÂàùÂßãÂåñMCPÂÆ¢Êà∑Á´Ø', async () => {
      expect(mcpClient).toBeDefined();
      await mcpClient.initialize();
      expect(mcpClient.isConnectedToMCP()).toBe(true);
    });

    it('Â∫îËØ•Ê≠£Á°ÆËøîÂõûÂèØÁî®Â∑•ÂÖ∑ÂàóË°®', () => {
      const tools = mcpClient.getAvailableTools();
      expect(tools).toHaveLength(8);
      
      const toolNames = tools.map(t => t.name);
      expect(toolNames).toEqual([
        'get_stock_basic_info',
        'get_stock_realtime_data',
        'get_stock_historical_data',
        'get_stock_technical_indicators',
        'get_stock_financial_data',
        'get_market_overview',
        'search_stocks',
        'get_stock_news',
      ]);
    });

    it('Â∫îËØ•Ê≠£Á°ÆËøîÂõûLLMÂ∑•ÂÖ∑ÂÆö‰πâ', () => {
      const toolDefs = mcpClient.getToolDefinitions();
      expect(toolDefs).toHaveLength(8);
      
      toolDefs.forEach(tool => {
        expect(tool).toHaveProperty('type', 'function');
        expect(tool.function).toHaveProperty('name');
        expect(tool.function).toHaveProperty('description');
        expect(tool.function).toHaveProperty('parameters');
      });
    });
  });

  describe('Áªü‰∏ÄÂçèË∞ÉÊúçÂä°', () => {
    it('Â∫îËØ•Ê≠£Á°ÆÂàõÂª∫Áªü‰∏ÄÂçèË∞ÉÊúçÂä°', () => {
      expect(orchestrator).toBeDefined();
    });

    it('Â∫îËØ•ËøîÂõûÊ≠£Á°ÆÁöÑÊúçÂä°Áä∂ÊÄÅ', () => {
      const status = orchestrator.getServiceStatus();
      expect(status.availableAgents).toEqual([
        'ComprehensiveAnalyst',
        'TradingStrategist',
      ]);
    });

    it('Â∫îËØ•Ê≠£Á°ÆÁîüÊàêÂª∫ËÆÆÊñáÊú¨', () => {
      const testCases = [
        { rec: 'STRONG_BUY', expected: 'Âº∫ÁÉà‰π∞ÂÖ• üöÄ' },
        { rec: 'BUY', expected: '‰π∞ÂÖ• üìà' },
        { rec: 'HOLD', expected: 'ÊåÅÊúâ ‚è∏Ô∏è' },
        { rec: 'SELL', expected: 'ÂçñÂá∫ üìâ' },
        { rec: 'STRONG_SELL', expected: 'Âº∫ÁÉàÂçñÂá∫ ‚ö†Ô∏è' },
      ];

      testCases.forEach(({ rec, expected }) => {
        const result = orchestrator['getRecommendationText'](rec);
        expect(result).toBe(expected);
      });
    });

    it('Â∫îËØ•Ê≠£Á°ÆÁîüÊàêÈ£éÈô©Á≠âÁ∫ß', () => {
      const testCases = [
        { score: 85, expected: '‰ΩéÈ£éÈô© üü¢' },
        { score: 70, expected: '‰∏≠Á≠âÈ£éÈô© üü°' },
        { score: 50, expected: 'ËæÉÈ´òÈ£éÈô© üü†' },
        { score: 30, expected: 'È´òÈ£éÈô© üî¥' },
      ];

      testCases.forEach(({ score, expected }) => {
        const result = orchestrator['getRiskLevel'](score);
        expect(result).toBe(expected);
      });
    });
  });

  describe('MCPÂ∑•ÂÖ∑Ë∞ÉÁî®Ê®°Êãü', () => {
    beforeEach(async () => {
      await mcpClient.initialize();
    });

    it('Â∫îËØ•ÊàêÂäüË∞ÉÁî®ËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØÂ∑•ÂÖ∑', async () => {
      const result = await mcpClient.callTool('get_stock_basic_info', {
        stock_code: '000001'
      });

      expect(result).toContain('ËÇ°Á•®Âü∫Êú¨‰ø°ÊÅØ');
      expect(result).toContain('000001');
      expect(result).toContain('ÈòøÈáå‰∫ëÁôæÁÇºMCPËÇ°Á•®Êï∞ÊçÆÊúçÂä°');
    });

    it('Â∫îËØ•ÊàêÂäüË∞ÉÁî®Â∏ÇÂú∫Ê¶ÇËßàÂ∑•ÂÖ∑', async () => {
      const result = await mcpClient.callTool('get_market_overview', {});

      expect(result).toContain('AËÇ°Â∏ÇÂú∫Ê¶ÇËßà');
      expect(result).toContain('‰∏äËØÅÊåáÊï∞');
      expect(result).toContain('Ê∑±ËØÅÊàêÊåá');
    });

    it('Â∫îËØ•ÊàêÂäüË∞ÉÁî®ËÇ°Á•®ÊêúÁ¥¢Â∑•ÂÖ∑', async () => {
      const result = await mcpClient.callTool('search_stocks', {
        keyword: 'ÁßëÊäÄ'
      });

      expect(result).toContain('ËÇ°Á•®ÊêúÁ¥¢ÁªìÊûú');
      expect(result).toContain('ÁßëÊäÄ');
    });
  });

  describe('ÈîôËØØÂ§ÑÁêÜ', () => {
    it('Â∫îËØ•Â§ÑÁêÜ‰∏çÊîØÊåÅÁöÑÂ∑•ÂÖ∑Ë∞ÉÁî®', async () => {
      await mcpClient.initialize();
      
      await expect(
        mcpClient.callTool('unsupported_tool', {})
      ).rejects.toThrow('‰∏çÊîØÊåÅÁöÑMCPÂ∑•ÂÖ∑: unsupported_tool');
    });

    it('Â∫îËØ•Â§ÑÁêÜAPIÂØÜÈí•Áº∫Â§±', async () => {
      // ÂàõÂª∫‰∏Ä‰∏™Ê≤°ÊúâAPIÂØÜÈí•ÁöÑÈÖçÁΩÆ
      const badConfigService = {
        get: jest.fn((key: string) => {
          if (key === 'DASHSCOPE_API_KEY') return undefined;
          return '';
        }),
      };

      const badModule = await Test.createTestingModule({
        providers: [
          MCPClientService,
          {
            provide: ConfigService,
            useValue: badConfigService,
          },
        ],
      }).compile();

      const badMcpClient = badModule.get<MCPClientService>(MCPClientService);
      
      await expect(badMcpClient.initialize()).rejects.toThrow(
        'DASHSCOPE_API_KEY ÁéØÂ¢ÉÂèòÈáèÊú™ËÆæÁΩÆ'
      );
    });
  });
});