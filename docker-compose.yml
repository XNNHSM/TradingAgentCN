services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT:-3000}:${PORT:-3000}"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-3000}
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-test_123!}
      DB_DATABASE: ${DB_DATABASE:-trading_agent}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: ${REDIS_DB:-0}
      # API Keys
      DASHSCOPE_API_KEY: ${DASHSCOPE_API_KEY:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOOGLE_API_KEY: ${GOOGLE_API_KEY:-}
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      # Cache Configuration
      CACHE_TTL: ${CACHE_TTL:-300}
      CACHE_MAX_ITEMS: ${CACHE_MAX_ITEMS:-1000}
      # LLM Configuration
      LLM_PRIMARY_PROVIDER: ${LLM_PRIMARY_PROVIDER:-dashscope}
      LLM_DEFAULT_TIMEOUT: ${LLM_DEFAULT_TIMEOUT:-30}
      LLM_MAX_RETRIES: ${LLM_MAX_RETRIES:-3}
      LLM_DEFAULT_TEMPERATURE: ${LLM_DEFAULT_TEMPERATURE:-0.7}
      LLM_DEFAULT_MAX_TOKENS: ${LLM_DEFAULT_MAX_TOKENS:-2000}
      # DashScope Models
      DASHSCOPE_FAST_MODEL: ${DASHSCOPE_FAST_MODEL:-qwen-turbo}
      DASHSCOPE_STANDARD_MODEL: ${DASHSCOPE_STANDARD_MODEL:-qwen-plus}
      DASHSCOPE_PREMIUM_MODEL: ${DASHSCOPE_PREMIUM_MODEL:-qwen-max}
      # System Performance
      MAX_CONCURRENT_ANALYSTS: ${MAX_CONCURRENT_ANALYSTS:-3}
      MAX_CONCURRENT_RESEARCHERS: ${MAX_CONCURRENT_RESEARCHERS:-2}
      MAX_CONCURRENT_TRADERS: ${MAX_CONCURRENT_TRADERS:-2}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_AGENT_LOGS: ${ENABLE_AGENT_LOGS:-true}
      # Log Level
      LOG_LEVEL: ${LOG_LEVEL:-info}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - trading-network

  postgres:
    image: postgres:${POSTGRES_VERSION:-15}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test_123!}
      POSTGRES_DB: ${POSTGRES_DB:-trading_agent}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS:---encoding=UTF-8 --lc-collate=C --lc-ctype=C}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-trading_agent}"]
      interval: ${POSTGRES_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${POSTGRES_HEALTHCHECK_TIMEOUT:-10s}
      retries: ${POSTGRES_HEALTHCHECK_RETRIES:-5}
      start_period: ${POSTGRES_HEALTHCHECK_START_PERIOD:-30s}
    networks:
      - trading-network

  redis:
    image: redis:${REDIS_VERSION:-7-alpine}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: >
      sh -c '
        if [ -n "$$REDIS_PASSWORD" ]; then
          redis-server --requirepass "$$REDIS_PASSWORD"
        else
          redis-server
        fi
      '
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: >
        sh -c '
          if [ -n "$$REDIS_PASSWORD" ]; then
            redis-cli -a "$$REDIS_PASSWORD" ping
          else
            redis-cli ping
          fi
        '
      interval: ${REDIS_HEALTHCHECK_INTERVAL:-30s}
      timeout: ${REDIS_HEALTHCHECK_TIMEOUT:-3s}
      retries: ${REDIS_HEALTHCHECK_RETRIES:-5}
    networks:
      - trading-network

  # 可选：Redis管理界面
  redis-commander:
    image: rediscommander/redis-commander:${REDIS_COMMANDER_VERSION:-latest}
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    environment:
      REDIS_HOSTS: local:redis:6379:0:${REDIS_PASSWORD:-}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - trading-network
    profiles:
      - redis-ui

volumes:
  postgres_data:
  redis_data:

networks:
  trading-network:
    driver: bridge