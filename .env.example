# 应用配置
NODE_ENV=development
PORT=3000
APP_PORT=3000

# 数据库配置 (PostgreSQL)
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=postgres
DB_PASSWORD=test_123!
DB_DATABASE=trading_agent

# Redis配置
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0

# 阿里云百炼(DashScope) API配置
# 获取API Key: https://dashscope.console.aliyun.com/
DASHSCOPE_API_KEY=your_dashscope_api_key_here

# 其他LLM提供商API配置(可选)
# OpenAI API Key (备用)
OPENAI_API_KEY=your_openai_api_key_here

# Google Gemini API Key (备用)
GOOGLE_API_KEY=your_google_api_key_here

# 日志配置
LOG_LEVEL=debug

# JWT配置(如果需要身份验证)
JWT_SECRET=your_jwt_secret_here
JWT_EXPIRES_IN=7d

# 缓存配置
CACHE_TTL=300
CACHE_MAX_ITEMS=1000

# LLM提供商配置
LLM_PRIMARY_PROVIDER=dashscope

# 阿里云百炼模型配置
DASHSCOPE_FAST_MODEL=qwen-turbo
DASHSCOPE_STANDARD_MODEL=qwen-plus
DASHSCOPE_PREMIUM_MODEL=qwen-max
DASHSCOPE_LONG_CONTEXT_MODEL=qwen-max-longcontext

# OpenAI模型配置 (备用)
OPENAI_FAST_MODEL=gpt-3.5-turbo
OPENAI_STANDARD_MODEL=gpt-4
OPENAI_PREMIUM_MODEL=gpt-4-turbo

# Google模型配置 (备用)
GOOGLE_FAST_MODEL=gemini-pro
GOOGLE_STANDARD_MODEL=gemini-pro
GOOGLE_PREMIUM_MODEL=gemini-pro

# LLM默认参数
LLM_DEFAULT_TIMEOUT=30
LLM_MAX_RETRIES=3
LLM_DEFAULT_TEMPERATURE=0.7
LLM_DEFAULT_MAX_TOKENS=2000

# 智能体个性化配置 (可选，使用默认值)
# 市场分析师
MARKET_ANALYST_MODEL=qwen-plus
MARKET_ANALYST_TEMPERATURE=0.7
MARKET_ANALYST_MAX_TOKENS=2500
MARKET_ANALYST_TIMEOUT=45

# 基本面分析师  
FUNDAMENTAL_ANALYST_MODEL=qwen-max
FUNDAMENTAL_ANALYST_TEMPERATURE=0.6
FUNDAMENTAL_ANALYST_MAX_TOKENS=3000
FUNDAMENTAL_ANALYST_TIMEOUT=60

# 新闻分析师
NEWS_ANALYST_MODEL=qwen-plus
NEWS_ANALYST_TEMPERATURE=0.7
NEWS_ANALYST_MAX_TOKENS=2500

# 多头研究员
BULL_RESEARCHER_TEMPERATURE=0.8

# 空头研究员  
BEAR_RESEARCHER_TEMPERATURE=0.7

# 保守型交易员
CONSERVATIVE_TRADER_TEMPERATURE=0.5

# 激进型交易员
AGGRESSIVE_TRADER_TEMPERATURE=0.8

# 反思智能体
REFLECTION_AGENT_MODEL=qwen-max
REFLECTION_AGENT_TEMPERATURE=0.4
REFLECTION_AGENT_MAX_TOKENS=3000
REFLECTION_AGENT_TIMEOUT=60

# 系统性能配置
MAX_CONCURRENT_ANALYSTS=3
MAX_CONCURRENT_RESEARCHERS=2
MAX_CONCURRENT_TRADERS=2
ENABLE_METRICS=true
ENABLE_AGENT_LOGS=true

# ============================================================================
# 中间件配置选项
# ============================================================================

# 中间件部署模式配置
# - 外部模式: 连接已存在的 PostgreSQL/Redis/Temporal 服务
# - 内部模式: 使用 docker-compose 启动内部服务
USE_EXTERNAL_POSTGRES=false
USE_EXTERNAL_REDIS=false  
USE_EXTERNAL_TEMPORAL=false

# 外部PostgreSQL配置 (当 USE_EXTERNAL_POSTGRES=true 时使用)
EXTERNAL_DB_HOST=your_postgres_host
EXTERNAL_DB_PORT=5432
EXTERNAL_DB_USERNAME=your_postgres_user
EXTERNAL_DB_PASSWORD=your_postgres_password
EXTERNAL_DB_DATABASE=trading_agent

# 外部Redis配置 (当 USE_EXTERNAL_REDIS=true 时使用)
EXTERNAL_REDIS_HOST=your_redis_host
EXTERNAL_REDIS_PORT=6379
EXTERNAL_REDIS_PASSWORD=your_redis_password
EXTERNAL_REDIS_DB=0

# 外部Temporal配置 (当 USE_EXTERNAL_TEMPORAL=true 时使用)
EXTERNAL_TEMPORAL_HOST=your_temporal_host
EXTERNAL_TEMPORAL_PORT=7233

# ============================================================================
# Temporal 工作流配置
# ============================================================================

# Temporal服务配置
TEMPORAL_HOST=localhost
TEMPORAL_PORT=7233
# 注意: TEMPORAL_NAMESPACE 和 TEMPORAL_TASK_QUEUE 已移除
# 现在由各模块根据规范自行管理: {模块名}-{NODE_ENV}

# Temporal工作流配置
WORKFLOW_EXECUTION_TIMEOUT=30m
ACTIVITY_EXECUTION_TIMEOUT=5m
ACTIVITY_RETRY_ATTEMPTS=3

# Temporal Docker服务配置
TEMPORAL_VERSION=1.22
TEMPORAL_UI_VERSION=2.21.3
TEMPORAL_UI_PORT=8088
TEMPORAL_HOST_PORT=7233

# Temporal 数据库配置 (共享主PostgreSQL实例)
# Temporal将在主PostgreSQL中创建独立的数据库
TEMPORAL_DB_NAME=temporal
# 注意: Temporal使用主PostgreSQL的用户名和密码

# Temporal配置目录
TEMPORAL_LOCAL_CONFIG_DIR=./config/temporal

# ============================================================================
# Docker Compose 环境变量配置
# 以下变量用于 docker-compose.yml 中的服务配置
# ============================================================================

# 应用服务端口配置
APP_PORT=3000
# 说明: 
# - PORT: 应用内部端口（容器内）
# - APP_PORT: 主机端口（外部访问端口）
# - 端口映射格式: APP_PORT:PORT (主机端口:容器端口)

# PostgreSQL Docker 服务配置
POSTGRES_VERSION=15
POSTGRES_PORT=5432
POSTGRES_USER=postgres
POSTGRES_PASSWORD=test_123!
POSTGRES_DB=trading_agent
POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C

# PostgreSQL 健康检查配置
POSTGRES_HEALTHCHECK_INTERVAL=30s
POSTGRES_HEALTHCHECK_TIMEOUT=10s
POSTGRES_HEALTHCHECK_RETRIES=5
POSTGRES_HEALTHCHECK_START_PERIOD=30s

# Redis Docker 服务配置  
REDIS_VERSION=7-alpine
REDIS_PORT=6379
REDIS_PASSWORD=
# 注意: REDIS_PASSWORD 留空表示无密码认证

# Redis 健康检查配置
REDIS_HEALTHCHECK_INTERVAL=30s
REDIS_HEALTHCHECK_TIMEOUT=3s
REDIS_HEALTHCHECK_RETRIES=5

# Redis Commander (管理界面) 配置
REDIS_COMMANDER_VERSION=latest
REDIS_COMMANDER_PORT=8081

# ============================================================================
# Docker 部署使用说明:
# ============================================================================

# === 启动模式选择 ===
# 1. 仅启动应用 (需要外部中间件服务):
#    docker-compose up app -d
#
# 2. 启动应用 + 内部PostgreSQL:
#    docker-compose --profile postgres up -d
#
# 3. 启动应用 + 内部Redis:
#    docker-compose --profile redis up -d
#
# 4. 启动应用 + 内部Temporal:
#    docker-compose --profile temporal up -d
#
# 5. 启动所有内部中间件服务 (推荐开发环境):
#    docker-compose --profile internal-services up -d
#
# === 可选服务 ===
# 启动Redis管理界面:
#    docker-compose --profile redis-ui up -d
#
# 启动Temporal管理工具:
#    docker-compose --profile temporal-admin up -d

# === 外部中间件模式配置示例 ===
# 1. 连接外部PostgreSQL:
#    DB_HOST=your.postgres.host DB_PORT=5432 docker-compose up app -d
#
# 2. 连接外部Redis:
#    REDIS_HOST=your.redis.host REDIS_PORT=6379 docker-compose up app -d
#
# 3. 连接外部Temporal:
#    TEMPORAL_HOST=your.temporal.host TEMPORAL_PORT=7233 docker-compose up app -d

# === 混合模式示例 ===
# 使用外部PostgreSQL，内部Redis和Temporal:
#    DB_HOST=external.postgres.host docker-compose --profile redis --profile temporal up -d

# 注意: 
# - docker-compose 会自动加载同目录下的 .env 文件
# - 所有环境变量都可以通过命令行临时覆盖
# - 使用profile可以精确控制启动哪些服务
# - 外部服务模式下不会启动对应的内部Docker服务
# ============================================================================
